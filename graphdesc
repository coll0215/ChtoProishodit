1) GoalTolerance - Погрешность конечной цели 
 1.1) xy_goal_tolerance - Погрешность конечного пункта назначения по осям икс и игрек
 1.2) yaw_goal_tolerance - Погрешность конечного пункта назначения по углу поворота робота 
 1.3) free_goal_vel - Нет ограничения на скорость в конце пути (робот может прибыть к своей цели с максимальной скоростью) 
 
2) HCPlanning - многопоточный поиск оптимального маршрута 
 2.1) enable_multithreading - активирование многопоточного поиска оптимального маршрута 
 2.2) max_number_classes - определяет максимальное количество допустимых альтернативных гомотопических классов (ограничивает вычислительные мощности)
 2.3) selection_cost_hysteresis - определяет коэффициент выбора оптимального маршрута (выбирается новый маршрут если new_cost < old_cost*factor)
 2.4) selection_prefer_initial_plan - определяет то, насколько стоимость выбранного маршрута будет снижена относительно глобального пути
 2.5) selection_obst_cost_scale - дополнительное масштабирование цены препятствий для выбора "лучшего" кандидата 
 2.6) selection_viapoint_cost_scale - дополнительное масштабирование промежуточных точек для выбора "лучшего" кандидата 
 2.7) selection_alternative_time_cost - если имеет значение TRUE, то цена времени заменяется на общее время в пути
 2.8) switching_blocking_period - определяет время задержки в секундах, которое должно истечь перед переключением на новый эквивалентный класс 
 2.9) roadmap_graph_no_samples - определяет число образцов, генерируемых для создания графов дорожной карт, если simple_exploration выключен
 2.10) roadmap_graph_area_width - определяет ширину области, в которой будет происходить генерирование выборки между началом и концом пути
 2.11) roadmap_graph_area_length_scale - длина прямоугольной области определяется расстоянием между началом и концом пути. Этот параметр дополнительно масштабирует расстояние так, чтобы геометрический центр оставался неизменным
 2.12) h_signature_prescaler - масштабирует число стоимости препятствий, чтобы допустить их большое количество. Не стоит ставить этот параметр на слишком малое значение, иначе препятствия невозможно будет отличить друг от друга
 2.13) h_signature_threshold - предполагается, что две h-сигнатуры равны, если разница их мнимной и реальной частей ниже определенного установленного порога, определяемого этим параметром
 2.14) obstacle_heading_threshold - в этоп параметре указывается нормализованное значение скалярного произведения между направлением препятствия и направлением цели, чтобы принять препятствия во внимание при эксплорации
 2.15) viapoints_all_candidates - если выставлено значение "TRUE", то все траектории разных топологий будут привязаны к набору промежуточных точек. В противном случае....
 2.16) visualize_hc_graph - визуализировать графы, которые создаются для эксплоринга новых гомотопических классов 
 
3) Obstacles 
 3.1) min_obstacles_dist - определяет минимальное желаемое расстояние до препятствий 
 3.2) inflation_dist - определяет буферную зону вокруг препятствий с ненулевой штрафной стоимостью (чтобы этот параметр возымел эффект, необходимо, чтобы он был больше, чем min_obstacles_dist)
 3.3) dynamic_obstacle_inflation_dist - определяет буферную зону вокруг динамически возникающих препятствий с ненулевой штрафной стоимостью (чтобы этот параметр возымел эффект, необходимо, чтобы он был больше, чем min_obstacles_dist)
 3.4) include_dymanic_obstacles - параметр указывает на то, должно ли движение динамических препятствий прогнозироваться. В таком случае они будут определены, как модели с постоянной скоростью. Если этот параметр имеет значение FALSE, то все препятствия считаются статическими 
 3.5) include_costmap_obstacles - параметр определяет то, должны ли учитываться препятствия на карте стоимостей напрямую ( это необходимо, если не реализованы отдельная кластеризация и обнаружение)
 3.6) legacy_obstacle_association - если этот параметр имеет значение TRUE, то используется старый метод ассоциации (для каждого препятствия искать ближайшее TEB положение), в противном случае используется новый метод (для каждого TEB положения искать только "релевантные" препятствия) 
 3.7) obstacle_association_force_inclusion_factor - новый метод ассоциации препятствий пытается соединить лишь релевантные препятствия с дискретизированной траекторией при оптимизации. Все препятствия внутри определяемой дистанции вынуждены быть включены ( как множество min_obstacle_dist). Например, если установить этот параметр на 2.0, то будут учитываться препятствия с радиусом 2.0*min_obstacle_dist 
 3.8) obstacle_association_cutoff_factor - см. obstacle_association_force_inclusion_factor, но за пределами [VALUE]*min_obstacle_dist, все препятствия игнорируются в ходе оптимизации. Сперва выполняется obstacle_association_force_inclusion_factor
 3.9) costmap_obstacles_behind_robot_dist - лимитирует занятое препятствиями пространство на локальной карте стоимости позади робота, учитываемое при планировании (определяется в метрах) 
 3.10) obstacle_poses_affected - положение препятствия привязывается к ближайшему положению на траектории, чтобы уменьшить вычислительные усилия. Но также учитывается количество соседей 

4) Optimization 
 4.1) no_inner_iterations - количество итераций солвера, вызываемых на каждой итерации внешнего цикла
 4.2) no_outer_iterations - каждая итерация внешнего цикла автоматически изменяет размер траектории и вызывает внутренний оптимизатор no_inner_iterations 
 4.3) optimization_activate - включает оптимизацию 
 4.4) optimization_verbose - отображает подробную информацию
 4.5) penalty_epsilon - добавляет небольшое значение предела штрафных функций для аппроксимации с жесткими ограничениями 
 4.6) weight_max_vel_x - оптимизационный вес для удовлетворительного значения максимально допустимой скорости поступательного движения 
 4.7) weight_max_vel_y - оптимизационный вес для удовлетворительного значения максимально допустимой скорости движения боком (только для голономных роботов) 
 4.8) weight_max_vel_theta - оптимизационный вес для удовлетворительного значения максимально допустимой скорости поворота
 4.9) weight_acc_lim_x - оптимизационный вес для удовлетворительного значения максимально допустимого ускорения при поступательном движении
 4.10) weight_acc_lim_y - оптимизационный вес для удовлетворительного значения максимально допустимого ускорения при движении боком (только для голономных роботов) 
 4.11) weight_max_acc_lim_theta - оптимизационный вес для удовлетворительного значения максимально допустимого ускорения при повороте 
 4.12) weight_kinematics_nh - оптимизационный вес для удовлетворительного значения неголономной кинематики
 4.13) weight_kinematics_forward_drive - оптимизационный вес, позволяющий роботу выбирать только прямолинейное движение (только для роботов с дифференциалом)
 4.14) weight_kinematics_turning_radius - оптимизационный вес, минимизирующий радиус поворота ( только для машиноподобных роботов) 
 4.15) weight_optimaltime - оптимизационный вес, для сужения выбора оптимальной траектории по времени в пути
 4.16) weight_shortest_path - оптимизационный вес, для сужения выбора оптимальной траектории по длине пути
 4.17) weight_obstacle - оптимизационный вес для удовлетворения минимального расстояния до препятствий 
 4.18) weight_inflation - оптимизационный вес для штрафа inflation (должен быть маленьким) 
 4.19) weight_dynamic_obstacle - оптимизационный вес для удовлетворения минимального расстояния до динамических препятствий 
 4.20) weight_dynamic_obstacle_inflation - оптимизационный вес для штрафа inflation у динамических препятствий (должен быть маленьким) 
 4.21) weight_viapoint - оптимизационный вес для минимизации дистанции до промежуточных точек
 4.22) weight_adapt_factor - некоторые специальные веса (на текущий момент это weight_obstacle) многократно масштабируются с помощью этого параметра на каждой внешней TEB итерации (weight_new: weight_old*factor). Итеративное увеличение весов вместо априорной установки большого значения приведет к лучшим численным условиям основной задачи оптимизации
 4.23) obstacle_cost_exponent - экспонента для нелинейной стоимости препятствий (cost = linear_cost*obstacle_cost_exponent). Если у этого параметра будет значение 1, то нелинейная стоимость будет отключена 
 
 5) Recovery
  5.1) shrink_horizon_backup - позволяет планировщику временно сузить горизонт (на 50%) в случае автоматически обнаруженных проблем 
  5.2) oscillation_recovery - позволяет обнаружить и устранить колебания между несколькими решениями одного и того же эквивалентного класса (робот часто переключается между влево/вправо/вперед/назад)
  
 6) Robot
  6.1) max_vel_x - максимальная скорость поступательного движения робота
  6.2) max_vel_x_backwards - максимальная скорость поступательного движения робота при обратном движении
  6.3) max_vel_theta - максимальная скорость поворота робота
  6.4) acc_lim_x - максимальное ускорение робота при поступательном движении
  6.5) acc_lim_theta - максимальное ускорение робота при повороте
  6.6) is_footprint_dynamic - если этот параметр имеет значение TRUE, то перед проверкой осуществимости траектории будет обновляться футпринт 
 CARLIKE:
  6.1.1) min_turning_radius - минимальный радиус поворота машиноподобных роботов (для роботов с дифференциалом - ноль)
  6.1.2) wheelbase - расстояние между приводным валом и рулевой осью (требуется только для машиноподобных роботов с включенным cmd_angle_instead_rotvel). Значение может быть отрицательным для заднеприводных роботов
  6.1.3) cmd_angle_instead_rotvel - заменяет скорость вращения в сообщении о заданной скорости соответствующим углом поворота
  
 7) Trajectory
  7.1) teb_autosize - позволяет автоматически изменять размер траектории в ходе оптимизации ( на основе временного разрешения траектории. Рекомендуется включить)
  7.2) dt_ref - временное разрешение запланированной траектории (обычное равняется 1/control_rate)
  7.3) dt_hysteresis - гистерезис, используемый для автоматического изменения размера взависимости от текущего временного разрешения (обычно ставится как 10% от dt_ref)
  7.4) global_plan_overwrite_orientation - некоторые глобальные планировщики не учитывают ориентацию локальных подцелей между стартом и глобальной целью, поэтому при включении этого параметра, она будет определяться автоматически
  7.5) allow_init_with_backwards_motion - если TRUE, то базовые траектории могут быть инициализированы движениями назад в случае, если цель находится позади старта на локальной карте стоимости (рекомендуется включать этот параметр только в том случае, если робот оснащен задними сенсорами)
  7.6) max_global_plan_lookahead_dist - определяет максимальную длину (кумулятивные евклидовы расстояния) подмножества глобального плана, учитываемого при оптимизации (если 0 или отрицательное значение - выключено. Длина также ограничена размером локальной карты стоимости)
  7.7) force_reinit_new_goal_dist - заставляет планнер повторно инициализировать траекторию, если предыдущая цель была обновлена и разница в расстоянии превышает указанное значение в метрах
  7.8) force_reinit_new_goal_angular - заставляет планнер повторно инициализировать траекторию, если предыдущая цель была обновлена и разница в повороте превышает указанное значение в метрах
  7.9) feasibility_check_no_poses - определяет, до какой позиции на прогнозируемом плане будет проверяться его осуществимость на каждом интервале 
  7.10) exact_arc_length - если TRUE, то планнер будет использовать точную длину дуги при расчетах скорости, ускорения и скорости поворота. В противном случае используется евклидова аппроксимация
  7.11) publish_feedback - планнер публикует отчет, содержащий полную траекторию и список активных препятствий 
  7.12) visualize_with_time_as_z_axis_scale - если значение этого параметра больше нуля, то траектория и препятствия будут визуализироваться в 3D, используя время в качестве оси Z, которое будет масштабироваться в зависимости от этого параметра. Полезно для динамических препятствий 
  
 8) ViaPoints
  8.1) global_plan_viapoint_sep - определяет минимальное расстояние между каждыми двумя последовательными промежуточными точками, полученных с глобального плана (если параметр отрицателен - выключено)
  8.2) via_points_ordered - если TRUE, то планнер будет придерживаться порядка сохраненных промежуточных точек 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
